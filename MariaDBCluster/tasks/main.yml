---
# tasks file for MariaDBCluster
  - name: Add MariaDB Repository
    yum_repository:
      name: MariaDB
      description: MariaDB 10.2 Yum Repository
      baseurl: http://yum.mariadb.org/10.2/centos7-amd64
      gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
      gpgcheck: 1

  - name: Install MariaDB Packages
    yum:
      name: [ "MariaDB-backup",
              "MariaDB-client",
              "MariaDB-common",
              "MariaDB-compat",
              "MariaDB-connect-engine",
              "MariaDB-cracklib-password-check",
              "MariaDB-devel",
              "MariaDB-server",
              "MariaDB-shared",
              "MariaDB-test" ]
      enablerepo: "MariaDB"
      state: installed

  - name: Install additional Packages
    yum:
      name: "{{ additional_packages }}"
      state: installed

  - name: Create MariaDB Data Partition
    parted:
      device: /dev/sdb
      number: 1
      state: present

  - name: Create MariaDB Log Partition
    parted:
      device: /dev/sdc
      number: 1
      state: present

  - name: Create MariaDB Data Partition FS
    filesystem:
      fstype: ext4
      dev: /dev/sdb1

  - name: Create MariaDB Log Partition FS
    filesystem:
      fstype: ext4
      dev: /dev/sdc1

  - name: Create MariaDB Data Dir
    file:
      path: /data/mariadb/
      state: directory
      mode: 0700
      owner: mysql
      group: mysql
      recurse: yes

  - name: Create MariaDB Log Dir
    file:
      path: /log/mariadb/
      state: directory
      mode: 0700
      owner: mysql
      group: mysql
      recurse: yes

  - name: Mount MariaDB Data
    mount:
      path: /data/mariadb
      src: /dev/sdb1
      fstype: ext4
      opts: noatime,data=writeback,noexec
      state: mounted

  - name: Mount MariaDB Log
    mount:
      path: /log/mariadb
      src: /dev/sdc1
      fstype: ext4
      opts: noatime,data=writeback,noexec
      state: mounted

  - name: Set Linux Swappiness
    sysctl:
      name: vm.swappiness
      value: 0
      sysctl_set: yes
      state: present
      reload: yes

  - name: Disable selinux (to be changed)
    selinux:
      state: disabled

  - name: Reboot Server
    shell: sleep 2 && /sbin/shutdown -r now
    async: 1
    poll: 0

  - name: Wait for the server to finish rebooting
    become: no
    local_action: wait_for host="{{ ansible_hostname }}" delay=15 state=started port=22 connect_timeout=10 timeout=180

  - name: MariaDB Base Configuration
    ini_file:
      path: "{{ mariadb_config_file }}"
      section: mysqld
      option: "{{ item.key }}"
      value: "{{ item.value }}"
      state: present
    with_dict: "{{ mariadb_base_config }}"

  - name: Create directory for MariaDB Database Files
    file:
      path: /data/mariadb/db
      owner: mysql
      group: mysql
      mode: 0700
      state: directory
      recurse: yes

  - name: mysql_install_db
    command: mysql_install_db --defaults-file=/etc/my.cnf
    args:
      creates: /data/mariadb/db/mysql/user.frm
    become_user: mysql

  - name: Start MariaDB
    service:
      name: mysql
      state: started

  - name: Debug mariadb_users
    debug:
      msg: "{{ item }} "
      verbosity: 2
    with_dict: "{{ mariadb_users }}"

  - name: Add MySQL Users to main instance
    mysql_user:
      name: "{{ item.value.username }}"
      password: "{{ item.value.password }}"
      priv: "{{ item.value.priv }}"
    with_dict: "{{ mariadb_users }}"
    when: ansible_hostname == "mariadb1"

  - name: Run mysql_secure_installation on one instance only
    shell: "ROOT_PASSWORD=$(date +%s | sha256sum | base64 | head -c 10) && echo -e \"\n\n$ROOT_PASSWORD\n$ROOT_PASSWORD\n\n\n\n\n \" | mysql_secure_installation 2>/dev/null && echo \"$ROOT_PASSWORD\" > /home/vagrant/mariadb_pw.txt && touch /home/vagrant/mysql_secure_installation.executed"
    args:
      creates: "/home/vagrant/mysql_secure_installation.executed"
    when: ansible_hostname == "mariadb1"

  - name: Execute mysqldump on primary master server
    shell: "mysqldump --all-databases --single-transaction --routines --triggers -u root -p$(cat mariadb_pw.txt) > mysqldump_$(hostname).sql"
    args:
      chdir: /home/vagrant
      creates: /home/vagrant/mysqldump_mariadb1.sql
    when: ansible_hostname == "mariadb1"
    register: mysqldump_status

  - name: Fetch mysqldump file if needed
    fetch:
      src: /home/vagrant/mysqldump_mariadb1.sql
      dest: /tmp
    when: ansible_hostname == "mariadb1" and mysqldump_status.changed == True

  - name: Does the mysqldump file exist locally?
    stat:
      path: /tmp/mariadb1/home/vagrant/mysqldump_mariadb1.sql
      checksum_algorithm: sha1
    register: dump_file
    become: no
    delegate_to: 127.0.0.1
    run_once: true

  - name: Debug
    debug:
      var: dump_file
      verbosity: 2

  - name: Copy mysqlfile to other hosts if needed
    copy:
      src: /tmp/mariadb1/home/vagrant/mysqldump_mariadb1.sql
      dest: /home/vagrant
      force: no
    when: ansible_hostname != "mariadb1" and dump_file.stat.exists == True and dump_file.stat.checksum == mariadb_mysqldump_md5

  #- name: Restore the mysqlfile if needed
